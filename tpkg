#!/bin/bash

# TPKG=TEST PACKAGE MANAGER. A TINY PACKAGE MANAGER FORK AND WRITTEN BECAUSE I WANT TO IMPROVE MY BASH KNOWLEDGE

# Default configuration variables
default_url="example.com/packages/"  # Replace with your website's URL
default_root="/home/richard/root"    # Absolute path of the root directory

# User-configurable variables
url=${TPKG_URL:-$default_url}
root=${TPKG_ROOT:-$default_root}

# Logging function
log() {
    echo "$(date): $1" >> "/home/$(whoami)/.tpkg/log.txt"
}
log "Script executed"

# Check Root
if [ "$(id -u)" != "0" ]; then
    echo -e "\033[0;31mSorry\033[0m, You need root permission to run this script."
    exit 1
fi

# Check if the repository URL is accessible
check_url=$(curl -Is "$url" | head -n 1)
if [[ $check_url != *"200"* ]]; then
    echo -e "\033[0;31mCould not access $url. Please check your internet connection or the URL.\033[0m"
    exit 1
fi

# Change the current directory to the specified root directory
cd "$root" || exit

# Check if the directory change was successful
if [ "$(pwd)" != "$root" ]; then
    echo -e "\033[0;31mCould not change directory to the root prefix.\033[0m"
    exit 1
fi

   # Function: Package Installation
install_package() {
    local package_name="$1"
    
    # Check if package name is specified
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to install.\033[0m"
        exit 1
    elif [ -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is already installed.\033[0m"
        exit 1
    fi

    # Create package URL
    package_url="$url$package_name/"
    
    # Check if the package exists in the repository
    package_check=$(curl -Is "$package_url" | head -n 1)
    
    if [[ $package_check == *"200"* ]]; then
        echo "$package_name package found. Proceeding with the installation."
    else
        echo -e "\033[0;31mAre you sure $package_name is spelled correctly?\033[0m"
        read -p "Do you want to proceed? [y/n]: " answer
        
        if [ "$answer" != "y" ]; then
            exit 1
        fi
    fi

    # Download the package from the URL
    echo "Downloading package..."
    busybox wget -cq "$package_url$package_name.tar"  # Get the package from the URL

    # Check if download was successful
    if [ "$?" = "0" ]; then
        echo "Download successful. Compiling package..."
        tar -xf "$package_name.tar"
        rm "$package_name.tar"
        echo "Installation successful."

        # Logging: Create a log file for installed packages
        log "$package_name installed"
    else
        echo -e "\033[0;31mInstallation failed.\033[0m"
        exit 1
    fi
}

# Function: Package Removal
remove_package() {
    local package_name="$1"
    
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to remove.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi
    
    # Package removal process
    rm -rf "usr/tdb/$package_name"  # This line removes the package
    
    # Logging: Update the 'removed.txt' log file
    log "$package_name removed"
    echo "$package_name successfully removed."
}

# Function: Package Update
update_package() {
    local package_name="$1"
    
    # Check if package name is specified
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to update.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi
    
    # Fetch the latest version from the repository
    latest_version=$(curl -s "$url$package_name/latest_version.txt")
    current_version=$(cat "usr/tdb/$package_name/version.txt")

    if [ "$latest_version" != "$current_version" ]; then
        echo "Updating $package_name from version $current_version to $latest_version..."
        
        # Download the latest package version from the repository
        echo "Downloading latest package..."
        busybox wget -cq "$url$package_name/$latest_version/$package_name.tar"

        # Check if download was successful
        if [ "$?" = "0" ]; then
            echo "Download successful. Compiling package..."
            tar -xf "$package_name.tar"
            rm "$package_name.tar"
            echo "Update successful."

            # Update the version file
            echo "$latest_version" > "usr/tdb/$package_name/version.txt"
        else
            echo -e "\033[0;31mUpdate failed. Unable to download the latest version.\033[0m"
            exit 1
        fi
    else
        echo "$package_name is already up-to-date."
    fi
}

# Function: List All Packages
list_packages() {
    echo "Installed packages:"
    ls -1 usr/tdb/
}

# Function to check dependencies
check_dependencies() {
    # Check if 'curl', 'busybox', and 'tar' commands exist
    if ! command -v curl &> /dev/null || ! command -v busybox &> /dev/null || ! command -v tar &> /dev/null; then
        echo -e "\033[0;31mThis script requires 'curl', 'busybox', and 'tar' to function properly.\033[0m"
        echo "Please install these dependencies before running the script."
        exit 1
    fi
}

# Dependency Checking Function - Adding a message for missing dependency list
check_package_dependencies() {
    local package_name="$1"
    
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to check its dependencies.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi
    
    # Check and display dependencies if the 'dependencies.txt' file exists
    if [ -f "usr/tdb/$package_name/dependencies.txt" ]; then
        echo "Dependencies for $package_name:"
        cat "usr/tdb/$package_name/dependencies.txt"
    else
        echo "No dependencies found for $package_name."
    fi
}

# Read Logs Function - To read and display log files
read_logs() {
    local log_file="$1"
    if [ -f "$log_file" ]; then
        echo "Contents of $log_file:"
        cat "$log_file"
    else
        echo "Log file $log_file not found or empty."
    fi
}

# Function: Dependency Resolution
resolve_dependencies() {
    local package_name="$1"
    
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to resolve dependencies.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi
    
    # Check if dependencies file exists for the package
    if [ -f "usr/tdb/$package_name/dependencies.txt" ]; then
        echo "Resolving dependencies for $package_name..."
        # Read dependencies and install them
        while IFS= read -r dependency; do
            install_package "$dependency"
        done < "usr/tdb/$package_name/dependencies.txt"
        echo "Dependencies resolved for $package_name."
    else
        echo "No dependencies found for $package_name."
    fi
}

# Function: Version Control
version_control() {
    local current_version="1.0"  # Replace with your current version
    local source_code="https://example.com/source_code_v$current_version.tar.gz"
    local documentation="https://example.com/documentation_v$current_version.pdf"

    echo "Current version: $current_version"
    echo "Source code: $source_code"
    echo "Documentation: $documentation"
}

# Function: Dependency Resolution with Package Installation
resolve_dependencies_with_installation() {
    local package_name="$1"

    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to resolve dependencies.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi

    # Check if dependencies file exists for the package
    if [ -f "usr/tdb/$package_name/dependencies.txt" ]; then
        echo "Resolving dependencies for $package_name..."
        # Read dependencies and install them
        while IFS= read -r dependency; do
            install_package "$dependency"
        done < "usr/tdb/$package_name/dependencies.txt"

        # Install the main package after resolving dependencies
        install_package "$package_name"

        echo "Dependencies resolved for $package_name."
    else
        echo "No dependencies found for $package_name."
    fi
}

# Function: Dependency Resolution with Package Installation. ipkg is just resolve_dependencies_with_installation
ipkg() {
    resolve_dependencies_with_installation "$1"
}

# Function to read log files after an action
read_logs "/home/$(whoami)/.tpkg/installed.txt"
read_logs "/home/$(whoami)/.tpkg/removed.txt"
