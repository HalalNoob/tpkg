#!/bin/bash

# Package Manager Script - A simple script to fetch and compile packages from a specified repository URL

# Set the repository URL where packages are hosted
url="yourwebsite.com/packages/"  # Replace with your website's URL
root="/home/richard/root"        # Absolute path of the root directory

# Change the current directory to the specified root directory
cd "$root"

# Check if the directory change was successful
if [ "$(pwd)" != "$root" ]; then
    echo -e "\033[0;31mCould not change directory to the root prefix.\033[0m"
    exit 1
fi

# Function: Package Installation
install_package() {
    local package_name="$1"
    
    # Check if package name is specified
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to install.\033[0m"
        exit 1
    elif [ -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is already installed.\033[0m"
        exit 1
    fi

    # Create package URL
    package_url="$url$package_name/"
    
    # Check if the package exists in the repository
    package_check=$(curl -Is "$package_url" | head -n 1)
    
    if [[ $package_check == *"200"* ]]; then
        echo "$package_name package found. Proceeding with the installation."
    else
        echo -e "\033[0;31mAre you sure $package_name is spelled correctly?\033[0m"
        read -p "Do you want to proceed? [y/n]: " answer
        
        if [ "$answer" != "y" ]; then
            exit 1
        fi
    fi

    # Download the package from the URL
    echo "Downloading package..."
    busybox wget -cq "$package_url$package_name.tar"  # Get the package from the URL

    # Check if download was successful
    if [ "$?" = "0" ]; then
        echo "Download successful. Compiling package..."
        tar -xf "$package_name.tar"
        rm "$package_name.tar"
        echo "Installation successful."

        # Logging: Create a log file for installed packages
        if [ ! -d "/home/$(whoami)/.tpkg/" ]; then
            mkdir -p "/home/$(whoami)/.tpkg/"
        fi

        if [ ! -f "/home/$(whoami)/.tpkg/installed.txt" ]; then
            touch "/home/$(whoami)/.tpkg/installed.txt"
        fi

        if [ ! -f "/home/$(whoami)/.tpkg/removed.txt" ]; then
            touch "/home/$(whoami)/.tpkg/removed.txt"
        fi

        echo "$package_name installed on $(date)" >> "/home/$(whoami)/.tpkg/installed.txt"
    else
        echo -e "\033[0;31mInstallation failed.\033[0m"
        exit 1
    fi
}

# Function: Package Removal
remove_package() {
    local package_name="$1"
    
    # Check if package name is specified
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to remove.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi
    
    # Package removal process
    # ...

    echo "$package_name successfully removed."
}

# Function: Package Update
update_package() {
    local package_name="$1"
    
    # Check if package name is specified
    if [ -z "$package_name" ]; then
        echo -e "\033[0;31mPlease specify a package to update.\033[0m"
        exit 1
    elif [ ! -d "usr/tdb/$package_name" ]; then
        echo -e "\033[0;31m$package_name is not installed.\033[0m"
        exit 1
    fi
    
    # Package update process
    # ...

    echo "$package_name successfully updated."
}

# Function: List All Packages
list_packages() {
    echo "Installed packages:"
    ls -1 usr/tdb/
}

# Function to check dependencies
check_dependencies() {
    # Check if 'curl', 'busybox', and 'tar' commands exist
    if ! command -v curl &> /dev/null || ! command -v busybox &> /dev/null || ! command -v tar &> /dev/null; then
        echo -e "\033[0;31mThis script requires 'curl', 'busybox', and 'tar' to function properly.\033[0m"
        echo "Please install these dependencies before running the script."
        exit 1
    fi
}

# Main script
if [ "$1" = "install" ]; then
    check_dependencies  # Check dependencies before installation
    install_package "$2"
elif [ "$1" = "remove" ]; then
    remove_package "$2"
elif [ "$1" = "update" ]; then
    update_package "$2"
elif [ "$1" = "list" ]; then
    list_packages
else
    echo -e "\033[0;31mNo action specified.\033[0m"
    exit 1
fi
